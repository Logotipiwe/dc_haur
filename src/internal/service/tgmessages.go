package service

import (
	"dc_haur/src/internal/domain"
	"dc_haur/src/internal/model"
	"dc_haur/src/internal/repo"
	"dc_haur/src/pkg"
	. "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
	config "github.com/logotipiwe/dc_go_config_lib"
	"strconv"
)

const DefaultDeckName = "üòâ –î–ª—è –ø–∞—Ä—ã"
const GotLevelsMessage = "–ù–∏–∂–µ - —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å - –∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å :)"

type TgMessageService struct {
	keyboards        TgKeyboardService
	cache            CacheService
	repos            *repo.Repositories
	bot              domain.BotInteractor
	questionsService *QuestionsService
}

const (
	AcceptFeedbackText    = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ —É—á—Ç–µ–º ‚ù§Ô∏è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ."
	AcceptNewQuestionText = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ú—ã –µ–≥–æ –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–ª–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ù§Ô∏è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ."
	AssignNewQuestionText = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–ª–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ù§Ô∏è"
	AssignFeedbackText    = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ —É—á—Ç—ë–º –≤ –±—É–¥—É—â–µ–º ‚ù§Ô∏è"
	WelcomeMessage        = `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –∏–≥—Ä–∞ "How Are You Really?" —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Å–±–ª–∏–∂–µ–Ω–∏–µ –ª—é–¥–µ–π! 

–≠—Ç–æ—Ç –±–æ—Ç - –∞–Ω–∞–ª–æ–≥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç, –≥–¥–µ –∫–∞–∂–¥—ã–π –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Å–∏–¥—è—â–∏—Ö –≤ –∫—Ä—É–≥—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—É –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω.

–ò–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ, –Ω–æ –∏ —Å–æ–∑–≤–æ–Ω–∏–≤—à–∏—Å—å –æ–Ω–ª–∞–π–Ω - —Ç–æ–≥–¥–∞ –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∑–∞—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ–¥—É—â–∏–π, –ª–∏–±–æ –∫–∞–∂–¥—ã–π –±–µ—Ä—ë—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

–í–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–∏ –≥–ª—É–±–∏–Ω—ã.
–í —Ç–µ—á–µ–Ω–∏–µ –∏–≥—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—é.

 –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`
)

func NewTgMessageService(tgKeyboardService TgKeyboardService, cache CacheService,
	bot domain.BotInteractor, repos *repo.Repositories, questionsService *QuestionsService) *TgMessageService {
	return &TgMessageService{
		keyboards:        tgKeyboardService,
		cache:            cache,
		bot:              bot,
		repos:            repos,
		questionsService: questionsService,
	}
}

func (s *TgMessageService) HandleStart(update Update) (*MessageConfig, error) {
	message := update.Message

	decks, err := s.repos.Decks.GetDecks()
	if err != nil {
		return nil, err
	}

	msg := NewMessage(message.Chat.ID, WelcomeMessage)
	msg.ReplyMarkup = s.keyboards.GetDecksKeyboard(decks)
	s.cache.RemoveChatFromCaches(update)
	return &msg, nil
}

func (s *TgMessageService) GetLevelsMessage(update Update, deckNameWithEmoji string) (*MessageConfig, error) {
	deck, err := s.repos.Decks.GetDeckByNameWithEmoji(deckNameWithEmoji)
	if err != nil {
		return nil, err
	}
	levels, err := s.repos.Levels.GetLevelsByDeckId(deck.ID)
	if err != nil {
		return nil, err
	}

	levelsNames := pkg.Map(levels, func(l *model.Level) string {
		if l.Emoji != nil {
			return *l.Emoji + " " + l.Name
		}
		return l.Name
	})

	markup := s.keyboards.GetLevelsKeyboard(levelsNames)

	message := NewMessage(update.Message.Chat.ID, deck.Description+"\n\n"+GotLevelsMessage)
	message.ReplyMarkup = markup
	s.cache.AssignDeckToChat(update, deck.Name)
	return &message, nil
}

func (s *TgMessageService) GetQuestionMessage(update Update, deckName string, levelNameWithEmoji string) (Chattable, error) {
	chatID := update.Message.Chat.ID
	level, err := s.questionsService.GetLevelByNames(deckName, levelNameWithEmoji)
	if err != nil {
		return nil, err
	}
	question, _, err := s.questionsService.GetRandQuestion(level.ID, strconv.FormatInt(chatID, 10))
	if err != nil {
		return nil, err
	}

	if imagesEnabled() {
		return createPhotoConfig(question, level, chatID)
	} else {
		return NewMessage(update.Message.Chat.ID, question.Text), nil
	}
}

func (s *TgMessageService) AcceptFeedbackCommand(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AssignFeedbackText)
	msg.ReplyMarkup = ReplyKeyboardRemove{RemoveKeyboard: true}
	s.cache.AssignFeedbackToChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptFeedback(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AcceptFeedbackText)
	userLink := "@" + update.Message.From.UserName
	err := s.bot.SendToOwner("–§–∏–¥–±–µ–∫ –æ—Ç " + userLink + ".\r\n" + update.Message.Text)
	if err != nil {
		return nil, err
	}
	s.cache.RemoveFeedbackFromChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptNewQuestionCommand(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AssignNewQuestionText)
	msg.ReplyMarkup = ReplyKeyboardRemove{RemoveKeyboard: true}
	s.cache.AssignNewQuestionToChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptNewQuestion(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AcceptNewQuestionText)
	userLink := "@" + update.Message.From.UserName
	err := s.bot.SendToOwner("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç " + userLink + ".\r\n" + update.Message.Text)
	if err != nil {
		return nil, err
	}
	s.cache.RemoveNewQuestionFromChat(update)
	return &msg, nil
}

func imagesEnabled() bool {
	imagesEnabled, err := strconv.ParseBool(config.GetConfigOr("ENABLE_IMAGES", "false"))
	if err != nil {
		imagesEnabled = false
	}
	return imagesEnabled
}

func createPhotoConfig(question *model.Question, level *model.Level, chatID int64) (*PhotoConfig, error) {
	cardImage, err := CreateImageCardFromQuestion(question, level.ColorStart, level.ColorEnd)
	if err != nil {
		return nil, err
	}
	bytes, err := pkg.EncodeImageToBytes(cardImage)
	if err != nil {
		return nil, err
	}
	return &PhotoConfig{
		BaseFile: BaseFile{
			BaseChat: BaseChat{ChatID: chatID},
			File:     FileBytes{Name: uuid.New().String() + ".jpg", Bytes: bytes},
		},
	}, nil
}
