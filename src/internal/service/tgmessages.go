package service

import (
	"dc_haur/src/internal/repo"
	. "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const DefaultDeckName = "üòâ –î–ª—è –ø–∞—Ä—ã"

type TgMessageService struct {
	keyboards     TgKeyboardService
	cache         CacheService
	questionsRepo repo.Questions
	decksRepo     repo.Decks
}

func NewTgMessageService(tgKeyboardService TgKeyboardService, cache CacheService, questions repo.Questions,
	decks repo.Decks) *TgMessageService {
	return &TgMessageService{
		keyboards:     tgKeyboardService,
		cache:         cache,
		questionsRepo: questions,
		decksRepo:     decks,
	}
}

func (s *TgMessageService) HandleStart(update Update) (error, *MessageConfig) {
	message := update.Message

	err, decks := s.decksRepo.GetDecks()
	if err != nil {
		return err, nil
	}

	msg := NewMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ \"How Are You Really?\" –Ω–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Å–±–ª–∏–∂–µ–Ω–∏–µ! –ö–∞–∂–¥–∞—è –∫–æ–ª–æ–¥–∞ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–∏—Ä–∞–π –∫–æ–ª–æ–¥—É –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –¥–ª—è —Ç–µ–±—è —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –¥–≤–æ–µ–º –∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏! \r\n\r\n –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
	msg.ReplyMarkup = s.keyboards.GetDecksKeyboard(decks)
	s.cache.RemoveDeckFromChat(update)
	return nil, &msg
}

func (s *TgMessageService) GetLevelsMessage(update Update, deckName string) (error, *MessageConfig) {
	println("GetLevelsMessage")

	err, levels := s.questionsRepo.GetLevels(deckName)
	if err != nil {
		return err, nil
	}

	markup := s.keyboards.GetLevelsKeyboard(levels)

	message := NewMessage(update.Message.Chat.ID, "–í–æ—Ç —Ç–≤–æ–∏ —É—Ä–æ–≤–Ω–∏")
	message.ReplyMarkup = markup
	s.cache.AssignDeckToChat(update, deckName)
	return nil, &message
}

func (s *TgMessageService) GetQuestionMessage(update Update, deckName string, levelName string) (error, *MessageConfig) {
	println("getQuestionMessage")
	err, question := s.questionsRepo.GetRandQuestion(deckName, levelName)
	if err != nil {
		return err, nil
	}
	msg := NewMessage(update.Message.Chat.ID, question.Text)
	return nil, &msg
}
