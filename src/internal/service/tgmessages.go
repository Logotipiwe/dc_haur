package service

import (
	"dc_haur/src/internal/domain"
	"dc_haur/src/internal/repo"
	"dc_haur/src/pkg"
	. "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
	config "github.com/logotipiwe/dc_go_config_lib"
	"log"
	"strconv"
)

const DefaultDeckName = "üòâ –î–ª—è –ø–∞—Ä—ã"
const GotLevelsMessage = "–í–æ—Ç —Ç–≤–æ–∏ —É—Ä–æ–≤–Ω–∏"

type TgMessageService struct {
	keyboards TgKeyboardService
	cache     CacheService
	repos     *repo.Repositories
	bot       domain.BotInteractor
}

const (
	AcceptFeedbackText    = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ —É—á—Ç–µ–º ‚ù§Ô∏è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ."
	AcceptNewQuestionText = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ú—ã –µ–≥–æ –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–ª–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ù§Ô∏è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ."
	AssignNewQuestionText = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–ª–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ù§Ô∏è"
	AssignFeedbackText    = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ —É—á—Ç—ë–º –≤ –±—É–¥—É—â–µ–º ‚ù§Ô∏è"
	WelcomeMessage        = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ \"How Are You Really?\" –Ω–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Å–±–ª–∏–∂–µ–Ω–∏–µ! –ö–∞–∂–¥–∞—è –∫–æ–ª–æ–¥–∞ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–∏—Ä–∞–π –∫–æ–ª–æ–¥—É –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –¥–ª—è —Ç–µ–±—è —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –¥–≤–æ–µ–º –∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏! \r\n\r\n –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
)

func NewTgMessageService(tgKeyboardService TgKeyboardService, cache CacheService,
	bot domain.BotInteractor, repos *repo.Repositories) *TgMessageService {
	return &TgMessageService{
		keyboards: tgKeyboardService,
		cache:     cache,
		bot:       bot,
		repos:     repos,
	}
}

func (s *TgMessageService) HandleStart(update Update) (*MessageConfig, error) {
	message := update.Message

	decks, err := s.repos.Decks.GetDecks()
	if err != nil {
		return nil, err
	}

	msg := NewMessage(message.Chat.ID, WelcomeMessage)
	msg.ReplyMarkup = s.keyboards.GetDecksKeyboard(decks)
	s.cache.RemoveChatFromCaches(update)
	return &msg, nil
}

func (s *TgMessageService) GetLevelsMessage(update Update, deckName string) (*MessageConfig, error) {
	log.Println("GetLevelsMessage")

	levels, err := s.repos.Questions.GetLevelsByName(deckName)
	if err != nil {
		return nil, err
	}

	markup := s.keyboards.GetLevelsKeyboard(levels)

	message := NewMessage(update.Message.Chat.ID, GotLevelsMessage)
	message.ReplyMarkup = markup
	s.cache.AssignDeckToChat(update, deckName)
	return &message, nil
}

func (s *TgMessageService) GetQuestionMessage(update Update, deckName string, levelName string) (Chattable, error) {
	log.Println("GetQuestionMessage")

	chatID := update.Message.Chat.ID
	question, err := s.repos.Questions.GetRandQuestionByNames(deckName, levelName)
	if err != nil {
		return nil, err
	}

	var chattable Chattable
	if imagesEnabled() {
		cardImage, err := CreateImageCard(question.Text)
		if err != nil {
			return nil, err
		}
		bytes, err := utils.EncodeImageToBytes(cardImage)
		if err != nil {
			return nil, err
		}
		chattable = PhotoConfig{
			BaseFile: BaseFile{
				BaseChat: BaseChat{ChatID: chatID},
				File:     FileBytes{Name: uuid.New().String() + ".jpg", Bytes: bytes},
			},
		}
	} else {
		chattable = NewMessage(update.Message.Chat.ID, question.Text)
	}
	err = s.repos.History.Insert(chatID, question)
	if err != nil {
		return nil, err
	}
	return chattable, nil
}

func (s *TgMessageService) AcceptFeedbackCommand(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AssignFeedbackText)
	msg.ReplyMarkup = ReplyKeyboardRemove{RemoveKeyboard: true}
	s.cache.AssignFeedbackToChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptFeedback(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AcceptFeedbackText)
	userLink := "@" + update.Message.From.UserName
	err := s.bot.SendToOwner("–§–∏–¥–±–µ–∫ –æ—Ç " + userLink + ".\r\n" + update.Message.Text)
	if err != nil {
		return nil, err
	}
	s.cache.RemoveFeedbackFromChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptNewQuestionCommand(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AssignNewQuestionText)
	msg.ReplyMarkup = ReplyKeyboardRemove{RemoveKeyboard: true}
	s.cache.AssignNewQuestionToChat(update)
	return &msg, nil
}

func (s *TgMessageService) AcceptNewQuestion(update Update) (*MessageConfig, error) {
	msg := NewMessage(update.Message.Chat.ID, AcceptNewQuestionText)
	userLink := "@" + update.Message.From.UserName
	err := s.bot.SendToOwner("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç " + userLink + ".\r\n" + update.Message.Text)
	if err != nil {
		return nil, err
	}
	s.cache.RemoveNewQuestionFromChat(update)
	return &msg, nil
}

func imagesEnabled() bool {
	imagesEnabled, err := strconv.ParseBool(config.GetConfigOr("ENABLE_IMAGES", "false"))
	if err != nil {
		imagesEnabled = false
	}
	return imagesEnabled
}
