definitions:
  model.Level:
    properties:
      colorButton:
        type: string
      colorEnd:
        type: string
      colorStart:
        type: string
      deckID:
        type: string
      emoji:
        type: string
      id:
        type: string
      levelOrder:
        type: integer
      name:
        type: string
    type: object
  model.Question:
    properties:
      additional_text:
        type: string
      id:
        type: string
      level_id:
        type: string
      text:
        type: string
    type: object
  output.DeckDTO:
    properties:
      cardsCount:
        type: integer
      description:
        type: string
      emoji:
        type: string
      hidden:
        type: boolean
      id:
        type: string
      image_id:
        type: string
      labels:
        type: string
      languageCode:
        type: string
      name:
        type: string
      openedCount:
        type: integer
      promo:
        type: string
    type: object
  output.LevelDto:
    properties:
      colorButton:
        type: string
      colorEnd:
        type: string
      colorStart:
        type: string
      counts:
        $ref: '#/definitions/output.QuestionsCounts'
      deckID:
        type: string
      emoji:
        type: string
      id:
        type: string
      levelOrder:
        type: integer
      name:
        type: string
    type: object
  output.QuestionsCounts:
    properties:
      openedQuestionsCount:
        type: integer
      questionsCount:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
  description: This is a HAUR server.
  license:
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: HAUR Swagger API
  version: "1.0"
paths:
  /v1/deck/{deckId}/dislike:
    post:
      description: Endpoint to remove like from a specific deck
      parameters:
      - description: Deck ID
        in: path
        name: deckId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: DislikeDEPRECATED a deck
  /v1/deck/{deckId}/levels:
    get:
      parameters:
      - description: Id of deck for which selecting levels
        in: path
        name: deckId
        required: true
        type: string
      - description: client id. Нужен чтобы получить количество открытых вопросов
        in: query
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Level'
            type: array
      summary: Уровни в колоде. С кличеством просмотренных карт.
  /v1/deck/{deckId}/like:
    post:
      description: Endpoint to like a specific deck. Gives 409 in case of duplicating
        like
      parameters:
      - description: Deck ID
        in: path
        name: deckId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Like a deck
  /v1/deck/{deckId}/questions:
    get:
      parameters:
      - description: Id of deck for which questions are selected
        in: path
        name: deckId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Question'
            type: array
      summary: Get all questions from specified deck
  /v1/enter-promo/{promo}:
    post:
      description: Если колода успешно разблокировалась - статус 201 (created) и колода
        в теле. Если нет промокода - статус 204 (No content) и пустое тело.
      parameters:
      - description: Промокод
        in: path
        name: promo
        required: true
        type: string
      - description: Id клиента
        in: query
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Отправить промокод. Если найдется скрытая колода с таким промо - она
        будет приходить в /decks
  /v1/get-vector-image/{id}:
    get:
      parameters:
      - description: Id of image
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            type: xml
      summary: Get code of vector image
  /v1/level/{id}:
    get:
      parameters:
      - description: id клиента. Обязателен если в features есть OPENED_COUNT
        in: query
        name: clientId
        type: string
      - description: Список модификаций ответа через запятую. Доступны - OPENED_COUNT
        in: query
        name: features
        type: string
      - description: id of level
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.LevelDto'
      summary: НЕ ИСПОЛЬЗУЕТСЯ. Получить уровень по id (с возможностью получить кол-во
        просмотренных карт)
  /v1/levels:
    get:
      parameters:
      - description: Id of deck for which selecting levels
        in: query
        name: deckId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Level'
            type: array
      summary: ПЕРЕХОДИТЬ НА /deck/:id/levels. Получить уровни в колоде.
  /v1/question:
    get:
      parameters:
      - description: Id of level for which selecting question
        in: query
        name: levelId
        required: true
        type: string
      - description: Client id - differs clients from each other. Needed for ordering
          random questions for each client/
        in: query
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Question'
      summary: Get random question by selected level
  /v1/question/{questionId}/dislike:
    post:
      description: Endpoint remove like from a particular question
      parameters:
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: DislikeDEPRECATED a question
  /v1/question/{questionId}/like:
    post:
      description: Endpoint to like a particular question. Gives 409 in case of duplicating
        like
      parameters:
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Like a question
  /v1/user/{userId}/likes:
    get:
      description: Retrieves all likes made by a user on questions and decks.
      parameters:
      - description: The ID of the user.
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get all likes made by a user
  /v2/decks:
    get:
      parameters:
      - description: Language code in upper case (RU, EN)
        in: query
        name: languageCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.DeckDTO'
            type: array
      summary: Get decks by lang code
  /v2/question/{questionId}/react-dislike:
    post:
      description: Endpoint to dislike a specific question. Gives 409 in case of duplicating
        dislike
      parameters:
      - description: question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Set dislike to a question
  /v2/question/{questionId}/react-like:
    post:
      description: Endpoint to like a particular question. Gives 409 in case of duplicating
        like
      parameters:
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Like a question
  /v2/question/{questionId}/react-remove:
    post:
      description: Endpoint remove like from a particular question
      parameters:
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Undo like a question
  /v2/user/{userId}/reactions:
    get:
      description: Retrieves all reactions made by a user on questions and decks.
      parameters:
      - description: The ID of the user.
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get all reactions made by a user
  /v3/decks:
    get:
      parameters:
      - description: Language code in upper case (RU, EN)
        in: query
        name: languageCode
        required: true
        type: string
      - description: Language code in upper case (RU, EN)
        in: query
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.DeckDTO'
            type: array
      summary: Get decks by lang code
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
