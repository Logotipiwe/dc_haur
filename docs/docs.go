// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/deck/{deckId}/questions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get all questions from specified deck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of deck for which questions are selected",
                        "name": "deckId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Question"
                            }
                        }
                    }
                }
            }
        },
        "/v1/decks": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get all available decks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Deck"
                            }
                        }
                    }
                }
            }
        },
        "/v1/levels": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get levels from specified deck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of deck for which selecting levels",
                        "name": "deckId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Level"
                            }
                        }
                    }
                }
            }
        },
        "/v1/question": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get random question by selected level",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of level for which selecting question",
                        "name": "levelId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client id - differs clients from each other. Needed for ordering random questions for each client/",
                        "name": "clientId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Question"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Deck": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "emoji": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.Level": {
            "type": "object",
            "properties": {
                "colorEnd": {
                    "type": "string"
                },
                "colorStart": {
                    "type": "string"
                },
                "deckID": {
                    "type": "string"
                },
                "emoji": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "levelOrder": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.Question": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "level_id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "HAUR Swagger API",
	Description:      "This is a HAUR server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
